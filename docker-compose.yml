services:
  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 15673:15672
      - 5673:5672
    volumes:
      - ./microservices-banking/.docker/rabbitmq/.rabbitmq_data:/var/lib/rabbitmq/mnesia
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    env_file:
      - ./microservices-banking/.env
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 5

  postgres-transactions:
    image: postgres:13
    container_name: postgres-transactions
    environment:
      POSTGRES_USER: ${POSTGRES_TRANSACTIONS_USER}
      POSTGRES_PASSWORD: ${POSTGRES_TRANSACTIONS_PASSWORD}
      POSTGRES_DB: ${POSTGRES_TRANSACTIONS_DB}    
    ports:
      - 5432:5432
    volumes:
      - ./microservices-banking/.docker/postgresql/transactions-data:/var/lib/postgresql/data
      - ./microservices-banking/.docker/postgresql/transactions-init-scripts:/docker-entrypoint-initdb.d
    env_file:
      - ./microservices-banking/.env
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"

  postgres-customers:
    image: postgres:13
    container_name: postgres-customers
    environment:
      POSTGRES_USER: ${POSTGRES_CUSTOMERS_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CUSTOMERS_PASSWORD}
      POSTGRES_DB: ${POSTGRES_CUSTOMERS_DB}
    ports:
      - 5433:5432
    volumes:
      - ./microservices-banking/.docker/postgresql/clients-data:/var/lib/postgresql/data
      - ./microservices-banking/.docker/postgresql/clients-init-scripts:/docker-entrypoint-initdb.d
    env_file:
      - ./microservices-banking/.env
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"

  transactions:
    container_name: transactions
    build:
      context: "./microservices-banking/transactions"
      dockerfile: Dockerfile
    command: npm run start:dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-transactions:
        condition: service_started
    ports:
      - 3000:3000
    volumes:
      - ./microservices-banking/transactions:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./microservices-banking/transactions/.env
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"

  customers:
    container_name: customers
    build:
      context: "./microservices-banking/customers"
      dockerfile: Dockerfile
    command: npm run start:dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-customers:
        condition: service_started
    ports:
      - 3001:3001
    volumes:
      - ./microservices-banking/customers:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./microservices-banking/customers/.env
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
        reservations:
          cpus: "0.25"
          memory: "128M"

  api-getway:
    container_name: api-getway
    build:
      context: "./microservices-banking/api-gateway"
      dockerfile: Dockerfile
    command: npm run start:dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      transactions:
        condition: service_started
      customers:
        condition: service_started
    ports:
      - 3002:3002
    environment:
      - USER_MS=customers:3001
      - TRANSACTION_MS=transactions:3000
    volumes:  
      - ./microservices-banking/api-gateway:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./microservices-banking/api-gateway/.env
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "384M"
        reservations:
          cpus: "0.375"
          memory: "192M"


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "128M"
        reservations:
          cpus: "0.125"
          memory: "64M"

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "128M"
        reservations:
          cpus: "0.125"
          memory: "64M"

networks:
  monitoring:

volumes:
  grafana_data: